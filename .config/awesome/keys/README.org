#+TITLE: Awesome WM Keybindings
#+AUTHOR: Lena SAVY

* TABLE OF CONTENTS :toc:
- [[#keyboard][KEYBOARD]]
  - [[#import-modules][Import modules]]
  - [[#import-variables][Import variables]]
  - [[#keyboard-1][Keyboard]]
  - [[#general-keybindings][General Keybindings]]
  - [[#client-keys][Client Keys]]
  - [[#eof-end-of-keyboard][EOF (End of Keyboard)]]
- [[#mouse][MOUSE]]
  - [[#import-modules-1][Import modules]]
  - [[#import-variables-1][Import variables]]
  - [[#hide-popup][Hide popup]]
  - [[#mouse-1][Mouse]]
  - [[#general-mouse-bindings][General Mouse Bindings]]
  - [[#client-buttons][Client Buttons]]
  - [[#taglist-buttons][Taglist Buttons]]
  - [[#tasklist-buttons][Tasklist Buttons]]
  - [[#volume-buttons][Volume Buttons]]
  - [[#brightness-buttons][Brightness Buttons]]
  - [[#eof-end-of-keyboard-1][EOF (End of Keyboard)]]

* KEYBOARD

Keyboard bindings are in =.config/awesome/keys/keyboard.lua= .

#+begin_src lua :tangle keyboard.lua
--[[--------------------------------------------------------
   __ ________  _____  ____  ___   ___  ___ 
  / //_/ __/\ \/ / _ )/ __ \/ _ | / _ \/ _ \
 / ,< / _/   \  / _  / /_/ / __ |/ , _/ // /
/_/|_/___/   /_/____/\____/_/ |_/_/|_/____/ 

--]]--------------------------------------------------------
#+end_src

** Import modules

Import all modules required for the Keyboard configuration.

#+begin_src lua :tangle keyboard.lua :comments org
local awful = require("awful")
local hotkeys_popup = require("awful.hotkeys_popup")
local brightness = require("keys.control.brightness")
local player = require("keys.control.player")
local volume = require("keys.control.volume")
-- local toggleScreenLeft = require("modules.panel.panelscreentoggle").left()
-- local toggleScreenRight = require("modules.panel.panelscreentoggle").right()
-- local toggleScreen = require("modules.panel.panelscreentoggle")
#+end_src

** Import variables

 Because I use some variables from my config.

#+begin_src lua :tangle keyboard.lua :comments org
require("vars")
require("lib.libkeys")
require("config.menu")
#+end_src

** Keyboard

 Keyboard object instance.

#+begin_src lua :tangle keyboard.lua :comments org
local keyboard = {}
#+end_src

** General Keybindings

Main keybindings function. This is where I set all my general keybindings.

#+begin_src lua :tangle keyboard.lua :comments org
function keyboard.init() awful.keyboard.append_global_keybindings({
#+end_src

*** Apps

#+begin_src lua :tangle keyboard.lua :comments org
bindApp(super,          enter,  "Terminal",                     terminal),
bindApp(super,          "p",    "File Manager",                 fm_cmd),
bindApp(super,          "c",  	"Calulator",               		calc),
bindApp(alt,            space,  "Rofi Launcher",                rofi_launcher),
bindApp({},             print,  "Screenshot (Screen)",          screenshot),
bindApp(super_shift,    print,  "Screenshot (Screen + Delay)",  screenshot_delay),
bindApp(super,          print,  "Screenshot (Region)",          screenshot_region),
bindApp(super_ctrl,     print,  "Screenshot (Region + Delay)",  screenshot_region_delay),
#+end_src

*** Awesome

#+begin_src lua :tangle keyboard.lua :comments org
bind(super,         "s",    "Awesome", "Help",              hotkeys_popup.show_help),
bind(super,         "w",    "Awesome", "Menu",              function() mymainmenu:show() end),
bind(super_ctrl,    "r",    "Awesome", "Reload Awesome",    awesome.restart),
bind(super_shift,   "q",    "Awesome", "Quit Awesome",      awesome.quit),
#+end_src

*** Controls

#+begin_src lua :tangle keyboard.lua :comments org
-- Brightness
bindCtl("XF86MonBrightnessUp",     "Brightness Up",     function() brightness.up() end),
bindCtl("XF86MonBrightnessUp",     "Brightness Down",   function() brightness.down() end),
-- Volume
bindCtl("XF86AudioRaiseVolume",    "Volume Up",         function() volume.up() end),
bindCtl("XF86AudioLowerVolume",    "Volume Down",       function() volume.down() end),
bindCtl("XF86AudioMute",           "Volume Toggle",     function() volume.toggle() end),
-- Player
bindCtl("XF86AudioPlay",           "Play",              function() player.play_pause() end),
bindCtl("XF86AudioPause",          "Pause",             function() player.play_pause() end),
bindCtl("XF86AudioNext",           "Next",              function() player.next() end),
bindCtl("XF86AudioPrev",           "Previous",          function() player.prev() end),
#+end_src

*** Screen

#+begin_src lua :tangle keyboard.lua :comments org
bind(super_ctrl,    "j", "Screen", "Focus previous screen",    function() awful.screen.focus_relative(-1) end),
bind(super_ctrl,    "k", "Screen", "Focus next screen",        function() awful.screen.focus_relative( 1) end),
-- bind(super, 		"e", "Screen", "Toggle side screens", 	   function() toggleScreen.visible = not toggleScreen.visible end),
#+end_src

*** Layout

#+begin_src lua :tangle keyboard.lua :comments org
-- Next layout
bind(super,         tab,    "Layout", "Next layout",                      function() awful.layout.inc( 1) end),
-- Master width factor
bind(super,         "h",    "Layout", "Master width factor -",   function() awful.tag.incmwfact(-0.05) end),
bind(super,         "l",    "Layout", "Master width factor +",   function() awful.tag.incmwfact( 0.05) end),
-- Master client number
bind(super_shift,   "h",    "Layout", "Master clients number -",      function() awful.tag.incnmaster(-1, nil, true) end),
bind(super_shift,   "l",    "Layout", "Master clients number +",      function() awful.tag.incnmaster( 1, nil, true) end),
-- Column number
bind(super_ctrl,    "h",    "Layout", "Columns number -",             function() awful.tag.incncol(-1, nil, true) end),
bind(super_ctrl,    "l",    "Layout", "Columns number +",             function() awful.tag.incncol( 1, nil, true) end),
#+end_src

*** Client

#+begin_src lua :tangle keyboard.lua :comments org
-- Focus
bind(super,         "u",    "Client Focus", "Focus urgent",         awful.client.urgent.jumpto ),
bind(super,         "j",    "Client Focus", "Focus previous",       function() awful.client.focus.byidx(-1) end),
bind(super,         "k",    "Client Focus", "Focus next",           function() awful.client.focus.byidx( 1) end),
bind(super,         left,   "Client Focus", "Focus left",           function() awful.client.focus.global_bydirection("left") end),
bind(super,         right,  "Client Focus", "Focus right",          function() awful.client.focus.global_bydirection("right") end),
bind(super,         up,     "Client Focus", "Focus top",            function() awful.client.focus.global_bydirection("up") end),
bind(super,         down,   "Client Focus", "Focus bottom",         function() awful.client.focus.global_bydirection("down") end),
-- Move
bind(super_shift,   "j",    "Client Move", "Move with previous",    function() awful.client.swap.byidx(-1) end ),
bind(super_shift,   "k",    "Client Move", "Move with next",        function() awful.client.swap.byidx( 1) end ),
bind(super_shift,   left,   "Client Move", "Move with left",        function() awful.client.swap.global_bydirection("left") end),
bind(super_shift,   right,  "Client Move", "Move with right",       function() awful.client.swap.global_bydirection("right") end),
bind(super_shift,   up,     "Client Move", "Move with top",         function() awful.client.swap.global_bydirection("up") end),
bind(super_shift,   down,   "Client Move", "Move with bottom",      function() awful.client.swap.global_bydirection("down") end),
#+end_src

*** Desktops

#+begin_src lua :tangle keyboard.lua :comments org
-- Go to tag
bindNum(super, "Tag", "Tag", 
    function(index)
        local tag = root.tags()[index]
        if tag then
            tag:view_only()
        end
    end
),

-- Toogle tag
bindNum(super_ctrl, "Tag", "Toggle",
    function(index)
        local tag = root.tags()[index]
        if tag then
            awful.tag.viewtoggle(tag)
        end
    end
),

-- Move to
bindNum(super_shift, "Tag", "Move client to",
    function(index)
        if client.focus then
            local tag = root.tags()[index]
            if tag then
                client.focus:move_to_tag(tag)
            end
        end
    end
),

-- Toggle to
bindNum(super_alt, "Tag", "Toggle client on",
    function(index)
        if client.focus then
            local tag = root.tags()[index]
            if tag then
                client.focus:toggle_tag(tag)
            end
        end
    end
),

})end
#+end_src

** Client Keys

Bindings used for clients interactions.

#+begin_src lua :tangle keyboard.lua :comments org
function keyboard.clientkeys()
    
    client.connect_signal("request::default_keybindings", function()
        awful.keyboard.append_client_keybindings({

            -- Client Close
            bind(super, "F4",   "Client", "Close window",       function(c) c:kill() end),
            bind(super, "o",    "Client", "Move to screen",     function(c) c:move_to_screen() end),
            bind(super, "f",    "Client", "Fullscreen window",  function(c) c.fullscreen = not c.fullscreen c:raise() end),

        })
    end)

end
#+end_src

** EOF (End of Keyboard)

#+begin_src lua :tangle keyboard.lua :comments org
return keyboard
#+end_src

* MOUSE

Mouse bindings are in =.config/awesome/keys/mouse.lua= .

#+begin_src lua :tangle mouse.lua
--[[--------------------------------------------------------
   __  _______  __  __________
  /  |/  / __ \/ / / / __/ __/
 / /|_/ / /_/ / /_/ /\ \/ _/  
/_/  /_/\____/\____/___/___/  

--]]--------------------------------------------------------
#+end_src

** Import modules

Import all modules required for the Mouse configuration.

#+begin_src lua :tangle mouse.lua :comments org
local awful = require("awful")
local panel = require("config.panel")
local hotkeys_popup = require("awful.hotkeys_popup")
#+end_src

** Import variables

Because I use some variables from my config.

#+begin_src lua :tangle mouse.lua :comments org
require("vars")
require("lib.libkeys")
require("config.menu")
#+end_src

** Hide popup

Function used to close popups everywhere outside of them.

#+begin_src lua :tangle mouse.lua :comments org
local function hide_popup()
    mymainmenu:hide()
    panel.visible = false
end
#+end_src

** Mouse

Mouse object instance.

#+begin_src lua :tangle mouse.lua :comments org
local mouse = {}
#+end_src

** General Mouse Bindings

Main mouse bindings function. This is where I set all my general mouse bindings.

#+begin_src lua :tangle mouse.lua :comments org
function mouse.init() awful.mouse.append_global_mousebindings({

click(left_click, function() hide_popup() end),
click(right_click, function() mymainmenu:toggle() end)

})end
#+end_src
 
** Client Buttons

Bindings used for clients interactions.

#+begin_src lua :tangle mouse.lua :comments org
function mouse.clientbuttons()

    client.connect_signal("request::default_mousebindings", function()
        awful.mouse.append_client_mousebindings({
            
            click(left_click,               function() hide_popup() end),
            click(left_click,               function(c) c:activate { context = "mouse_click" } end),
            clickMod(super, left_click,     function(c) c:activate { context = "mouse_click", action = "mouse_move"  } end),
            clickMod(super, right_click,    function(c) c:activate { context = "mouse_click", action = "mouse_resize"} end)
        })
    end)

end
#+end_src

** Taglist Buttons

Bindings used for taglist interactions.

#+begin_src lua :tangle mouse.lua :comments org
function mouse.taglist_mouse() return {

    -- Hide popups
    click(left_click, function() hide_popup() end),
    
    -- Switch/Toggle desktop
    click(left_click,   function(t) t:view_only() end),	
    click(right_click,  awful.tag.viewtoggle),

    -- Next/Previous desktop
    click(scroll_up,    function(t) awful.tag.viewnext(t.screen) end),
    click(scroll_down,  function(t) awful.tag.viewprev(t.screen) end),

    -- Move the active window to the desktop
    clickMod(super, left_click, 
        function(t)			        
            if client.focus then
                client.focus:move_to_tag(t)
            end
        end
    ),

    -- Clone the active window to the desktop
    clickMod(super, right_click, 
        function(t)			    
            if client.focus then
                client.focus:toggle_tag(t)
            end
        end
    )

}end
#+end_src

** Tasklist Buttons

Bindings used for tasklist interactions.

#+begin_src lua :tangle mouse.lua :comments org
function mouse.tasklist_mouse() return {

    -- Hide popups
    click(left_click, function() hide_popup() end),

    -- Toggle window
    click(left_click,
        function (c)
            if c == client.focus then
                c.minimized = true
            else
                c:emit_signal("request::activate", "tasklist", {raise = true} )
            end
        end
    ),

    -- Tasklist menu
    click(right_click, function () awful.menu.client_list( { theme = { width = 250 } } ) end),

    -- Next/Previous window
    click(scroll_up,    function () awful.client.focus.byidx( 1) end),
    click(scroll_down,  function () awful.client.focus.byidx(-1) end)

}end
#+end_src

** Volume Buttons

Bindings used for volume controls.

#+begin_src lua :tangle mouse.lua :comments org
local volume = require("keys.control.volume")

function mouse.volume_mouse() return {

    -- Toggle audio
    click(left_click,   function() volume.toggle() end),

    -- Up/Down audio
    click(scroll_up,    function() volume.up() end),
    click(scroll_down,  function() volume.down() end),

}end
#+end_src

** Brightness Buttons

Bindings used for brightness controls.

#+begin_src lua :tangle mouse.lua :comments org
local brightness = require("keys.control.brightness")

function mouse.light_mouse() return {

    -- Up/Down light
    click(scroll_up,    function() brightness.up() end),
    click(scroll_down,  function() brightness.down() end)

}end
#+end_src

** EOF (End of Keyboard)

#+begin_src lua :tangle mouse.lua :comments org
return mouse
#+end_src
