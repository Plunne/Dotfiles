#+TITLE: Plunne's Awesome WM
#+AUTHOR: Lena SAVY

Hi!

I daily use Awesome WM as my window manager, it's the best for me.

* WHY I CHOSE AWESOME WM?

Awesome WM is the only one that i can get the perfect look at the same time of my workflow.

Generally other window managers don't have the ability to fully customize title bars except Open Box.
But Openbox isn't a dynamic tiling window manager.

Howerver, Awesome also allow me to design my OS entirely with complex modules.
For exemple, I created beautiful rounded modules with different levels of faces. I have rounded rectangles
into other rounded rectangle into a container background. Only Awesome can do that with an implemented
titlebar feature.

To talk about workflow, I have different layouts withs different master window size for different desktops.
Some other window managers like BSPWM (which I am from) can do this but with all of them I don't have
all the above features.

* TABLE OF CONTENTS :toc:
- [[#why-i-chose-awesome-wm][WHY I CHOSE AWESOME WM?]]
- [[#variables][VARIABLES]]
  - [[#applications][Applications]]
  - [[#monitors][Monitors]]
  - [[#keys][Keys]]
- [[#configuration][CONFIGURATION]]
  - [[#import-modules][Import modules]]
  - [[#layouts][Layouts]]
  - [[#desktops][Desktops]]
  - [[#rules][Rules]]
  - [[#daemons][Daemons]]
  - [[#autostart][Autostart]]
  - [[#bars][Bars]]
- [[#organisation][ORGANISATION]]

* VARIABLES

I decided to put all my Awesome WM environement variables into =.config/awesome/vars.lua= .

#+begin_src lua :tangle vars.lua
--[[

██╗   ██╗ █████╗ ██████╗ ███████╗       ██╗     ██╗   ██╗ █████╗ 
██║   ██║██╔══██╗██╔══██╗██╔════╝       ██║     ██║   ██║██╔══██╗
██║   ██║███████║██████╔╝███████╗       ██║     ██║   ██║███████║
╚██╗ ██╔╝██╔══██║██╔══██╗╚════██║       ██║     ██║   ██║██╔══██║
 ╚████╔╝ ██║  ██║██║  ██║███████║    ██╗███████╗╚██████╔╝██║  ██║
  ╚═══╝  ╚═╝  ╚═╝╚═╝  ╚═╝╚══════╝    ╚═╝╚══════╝ ╚═════╝ ╚═╝  ╚═╝

--]]
#+end_src

** Applications

This section regroup all my custom commands for differents applications like terminal, file manager, etc.

#+begin_src lua :tangle vars.lua :comments org
-- Apps
terminal        = "st"
editor          = "emacsclient -c"
filemanager     = "thunar"
editor_cmd      = terminal .. " -e " .. "nvim"
fm_cmd          = terminal .. " -e " .. "ranger"
rofi_launcher   = "rofi -no-lazy-grab -show drun"
rofi_calc       = "rofi -show calc -no-show-match -no-sort -terse -modi calc"
calc            = "qalculate-gtk"

-- Brightness
brightness_up   = "brightnessctl set 5%+"
brightness_down = "brightnessctl set 5%-"

-- Volume
volume_up       = "amixer sset Master unmute && amixer set Master 2%+"
volume_down     = "amixer sset Master unmute && amixer set Master 2%-"
volume_toggle   = "amixer set Master toggle"

player_toggle   = "playerctl play-pause"
player_next     = "playerctl next"
player_prev     = "playerctl previous"

-- Screenshot
screenshot              = "flameshot screen -n 1 -c -p ~/Screenshots"
screenshot_delay        = "flameshot screen -n 1 -c -p ~/Screenshots -d 3000"
screenshot_region       = "flameshot gui"
screenshot_region_delay = "flameshot gui -d 3000"
#+end_src

** Monitors

I created a variable for each monitors I use.

#+begin_src lua :tangle vars.lua :comments org
screen1 = "DisplayPort-2"   -- Primary
screen2 = "DVI-D-0"         -- Right
screen3 = "HDMI-A-0"        -- Left
#+end_src

** Keys

For an easier configuration and better readability I decided to aliases some keys in my config.

#+begin_src lua :tangle vars.lua :comments org
-- Keys Aliases
modkey  = "Mod4"
altkey  = "Mod1"
enter   = "Return"
space   = "space"
esc     = "Escape"
tab     = "Tab"
print   = "Print"

-- Arrow keys
up      = "Up"
down    = "Down"
left    = "Left"
right   = "Right"

-- Mouse buttons
left_click  = 1
right_click = 3
scroll_up   = 4
scroll_down = 5
#+end_src

* CONFIGURATION

My main configuration file is my =rc.lua= , so I splitted my entire config into many organized files. I call only the
settings functions I made that I need to setup my WM.

#+begin_src lua :tangle rc.lua
--[[

██████╗  ██████╗       ██╗     ██╗   ██╗ █████╗ 
██╔══██╗██╔════╝       ██║     ██║   ██║██╔══██╗
██████╔╝██║            ██║     ██║   ██║███████║
██╔══██╗██║            ██║     ██║   ██║██╔══██║
██║  ██║╚██████╗    ██╗███████╗╚██████╔╝██║  ██║
╚═╝  ╚═╝ ╚═════╝    ╚═╝╚══════╝ ╚═════╝ ╚═╝  ╚═╝

--]]
#+end_src

** Import modules

Import all modules that are required for the config.

#+begin_src lua :tangle rc.lua :comments org
pcall(require, "luarocks.loader")                               -- LUAROCKS : Needed
require("awful.autofocus")                                      -- AUTOFOCUS : Focus windows when created
require("beautiful").init("~/.config/awesome/themes/feather-dark/theme.lua")  -- THEME : Set theme path
require("system")(s)                                            -- SYSTEM : Loads system
require("keys")                                                 -- KEYS : Loads keybindings
require("lib.libconfig")                                        -- CONFIG : Loads config library
#+end_src

** Layouts

 Uncomment the layouts you want to use.

#+begin_src lua :tangle rc.lua :comments org
set_layouts({
    l.floating,
    l.tile,
    --l.tile.left,
    --l.tile.bottom,
    l.tile.top,
    --l.fair,
    --l.fair.horizontal,
    --l.spiral,
    --l.spiral.dwindle,
    l.max,
    --l.max.fullscreen,
    --l.magnifier,
    --l.corner.nw,
    --l.corner.ne,
    --l.corner.sw,
    --l.corner.se,
})
#+end_src

** Desktops

 To set a desktop use : =add_desktop(name, screen, layout, ratio, gap, selected, icon_path)=

#+begin_src lua :tangle rc.lua :comments org
add_desktop(" 1/ ",    screen1,    l.tile,         0.5,    false,  true,   nil)
add_desktop(" 2 ",      screen1,    l.tile,         0.6,    false,  false,  nil)
add_desktop(" 3 ",      screen1,    l.tile,         0.6,    false,  false,  nil)
add_desktop(" 4/ ",    screen2,    l.max,          0.7,    false,  true,   nil)
add_desktop(" 5 ",      screen2,    l.tile,         0.6,    false,  false,  nil)
add_desktop(" 6 ",      screen2,    l.tile,         0.5,    false,  false,  nil)
add_desktop(" 7 ",      screen3,    l.tile,         0.5,    false,  false,  nil)
add_desktop(" 8 ",      screen3,    l.tile,         0.5,    false,  false,  nil)
add_desktop(" 9/ ",    screen3,    l.max,          0.5,    false,  true,   nil)
#+end_src

** Rules

Needed for generic rules : =rules_All()=
Enable/Disable default titlebars : =rules_Titlebars(bool)=
Disable titlebars for some apps : =rules_NoTitlebars(apps)=
Apply some rules for a single app : =rules_Single(app, props)=
Apply some rules for multiple apps : =rules_Multiple(apps, props)=

#+begin_src lua :tangle rc.lua :comments org
rules_All()
rules_Titlebars(true)
rules_NoTitlebars({"firefox", "codium", "discord", "Spotify", "spotify"})
rules_Multiple({"arandr", "Qalculate-gtk"}, { floating = true })
rules_Multiple({"discord", "Spotify", "spotify"}, { screen = screen3 })
#+end_src
 
** Daemons

Set daemons initialisations at startup : =run_deamons({deamon1, deamons2})=

#+begin_src lua :tangle rc.lua :comments org
run_daemons({
    "picom",
    "udiskie",
    "nm-applet",
    "flameshot",
    "xrdb .Xressources",
    "sh -c ~/.apps/OpenTabletDriver/bin/OpenTabletDriver.Daemon",
    "emacs --daemon"
})
#+end_src

** Autostart

Launch app at startup : =run(myapp, mytag)=

#+begin_src lua :tangle rc.lua :comments org
run("firefox", " 4/ ")
run("discord", " 9/ ")
run("emacsclient -c -n -a='emacs' --eval '(load-file \"~/.emacs.d/config.el\")'", " 1/ ")
#+end_src

** Bars

Load bars for each screens.

#+begin_src lua :tangle rc.lua :comments org
require("config.bar1")(screen[screen1])
require("config.bar2")(screen[screen2])
require("config.bar3")(screen[screen3])
#+end_src

* ORGANISATION

- *config* : Main modules configurations
- *keys* : Keybindings
- *lib* : Wrapping library
- *modules* : Modules widgets implementations
- *system* : System settings
- *theme* : Theming configuration and icons
